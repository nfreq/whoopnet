%YAML:1.0
########### HDZERO Mobula6 2024 ECO
# HDZERO ECO Runcam
# https://vision.in.tum.de/data/datasets/visual-inertial-dataset#geometric_calibration
# fisheye (1280x720) --> CROP (960x720)


#common parameters
imu_topic: "whoopnet/io/imu"
image_topic: "whoopnet/io/camera_compressed"
output_path: "/mnt/weightstorage/nfreq/whoopnet/log/vins-mono/output"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 960
image_height: 720
distortion_parameters: # Handling distortion before-hand ( don't do it twice )
  k1: 0
  k2: 0
  p1: 0
  p2: 0
projection_parameters:
  fx: 312.40107456
  fy: 312.70178207
  cx: 454.13656046
  cy: 331.2299262

# color_order: "BGR"
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 2   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
#extrinsicRotation: !!opencv-matrix
#   rows: 3
#   cols: 3
#   dt: d
#   data: [0.0148655429818, -0.999880929698, 0.00414029679422,
#           0.999557249008, 0.0149672133247, 0.025715529948, 
#           -0.0257744366974, 0.00375618835797, 0.999660727178]
#Translation from camera frame to imu frame, imu^T_cam
#extrinsicTranslation: !!opencv-matrix
#   rows: 3
#   cols: 1
#   dt: d
#   data: [-0.0216401454975,-0.064676986768, 0.00981073058949]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 10            # min distance between two features 
freq: 15                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 2.0 #1.0   # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04         # max solver itration time (ms), to guarantee real time
max_num_iterations: 10 #8     # max solver itrations, to guarantee real time
keyframe_parallax: 5.0 #10.0  # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.02333807072  # accelerometer_noise_density
gyr_n: 0.0023797342   # gyroscope_noise_density
acc_w: 0.00140908995  # accelerometer_random_walk
gyr_w: 0.00035510868  # gyroscope_random_walk
g_norm: 9.81007       # gravity magnitude

#loop closure parameters
loop_closure: 1                                                             # start loop closure
load_previous_pose_graph: 0                                                 # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1                                                      # useful in real-time and large project
pose_graph_save_path: "/mnt/weightstorage/nfreq/whoopnet/log/pose_graph/"   # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.045                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 1                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.075           # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.3      # size of camera marker in RVIZ
